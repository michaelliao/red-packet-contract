{
    "language": "Solidity",
    "sources": {
        "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "contracts/Validators.sol": {
            "content": "// SPDX-License-Identifier: GPLv3\npragma solidity =0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\ninterface ICondition {\n    function check(\n        address redPacketContract,\n        uint256 redPacketId,\n        address operator\n    ) external view returns (bool);\n}\n\ninterface IRedPacket {\n    enum BonusType {\n        AVERAGE,\n        RANDOM\n    }\n    struct RedPacketInfo {\n        uint256 passcodeHash;\n        uint256 amount;\n        uint256 amountLeft;\n        address creator;\n        address token;\n        address condition;\n        uint32 total;\n        uint32 totalLeft;\n        BonusType bonusType;\n    }\n\n    function getRedPacket(uint256 id)\n        external\n        view\n        returns (RedPacketInfo memory);\n\n    function isOpened(uint256 id, address addr) external view returns (bool);\n}\n\nabstract contract BaseValidator is ICondition {\n    IRedPacket internal redPacket;\n\n    constructor(address redPacketAddr) {\n        redPacket = IRedPacket(redPacketAddr);\n    }\n\n    modifier onlyCreator(uint256 redPacketId) {\n        IRedPacket.RedPacketInfo memory rp = redPacket.getRedPacket(\n            redPacketId\n        );\n        require(msg.sender == rp.creator, \"not creator\");\n        _;\n    }\n\n    modifier checkContract(address addr) {\n        require(addr == address(redPacket), \"invalid red packet address\");\n        _;\n    }\n}\n\n/**\n * Only address in the pool can open the red packet.\n */\ncontract AddressPoolValidator is BaseValidator {\n    mapping(uint256 => mapping(address => bool)) pools;\n\n    constructor(address redPacketAddr) BaseValidator(redPacketAddr) {}\n\n    function addAddresses(uint256 redPacketId, address[] memory addrs)\n        public\n        onlyCreator(redPacketId)\n    {\n        setAddresses(true, redPacketId, addrs);\n    }\n\n    function removeAddresses(uint256 redPacketId, address[] memory addrs)\n        public\n        onlyCreator(redPacketId)\n    {\n        setAddresses(false, redPacketId, addrs);\n    }\n\n    function setAddresses(\n        bool add,\n        uint256 redPacketId,\n        address[] memory addrs\n    ) internal {\n        mapping(address => bool) storage pool = pools[redPacketId];\n        for (uint256 i = 0; i < addrs.length; i++) {\n            pool[addrs[i]] = add;\n        }\n    }\n\n    function check(\n        address redPacketContract,\n        uint256 redPacketId,\n        address operator\n    ) external view checkContract(redPacketContract) returns (bool) {\n        mapping(address => bool) storage pool = pools[redPacketId];\n        return pool[operator];\n    }\n}\n\n/**\n * Only the NFT-721 holder can open the red packet\n */\ncontract Nft721HolderValidator is BaseValidator {\n    mapping(uint256 => address) nftAddrs;\n\n    constructor(address redPacketAddr) BaseValidator(redPacketAddr) {}\n\n    function setERC721(uint256 redPacketId, address nftAddr)\n        public\n        onlyCreator(redPacketId)\n    {\n        nftAddrs[redPacketId] = nftAddr;\n    }\n\n    function check(\n        address redPacketContract,\n        uint256 redPacketId,\n        address operator\n    ) external view checkContract(redPacketContract) returns (bool) {\n        address nftAddr = nftAddrs[redPacketId];\n        if (nftAddr == address(0)) {\n            return false;\n        }\n        return IERC721(nftAddr).balanceOf(operator) > 0;\n    }\n}\n\n/**\n * Only the NFT-1155 holder can open the red packet\n */\ncontract Nft1155HolderValidator is BaseValidator {\n    mapping(uint256 => address) nftAddrs;\n    mapping(uint256 => uint256) nftIds;\n\n    constructor(address redPacketAddr) BaseValidator(redPacketAddr) {}\n\n    function setERC1155(\n        uint256 redPacketId,\n        address nftAddr,\n        uint256 nftId\n    ) public onlyCreator(redPacketId) {\n        nftAddrs[redPacketId] = nftAddr;\n        nftIds[redPacketId] = nftId;\n    }\n\n    function check(\n        address redPacketContract,\n        uint256 redPacketId,\n        address operator\n    ) external view checkContract(redPacketContract) returns (bool) {\n        address nftAddr = nftAddrs[redPacketId];\n        if (nftAddr == address(0)) {\n            return false;\n        }\n        return IERC1155(nftAddr).balanceOf(operator, nftIds[redPacketId]) > 0;\n    }\n}\n\n/**\n * Only the ERC20 holder with minimum balance can open the red packet\n */\ncontract ERC20HolderValidator is BaseValidator {\n    mapping(uint256 => address) ercAddrs;\n    mapping(uint256 => uint256) ercHolds;\n\n    constructor(address redPacketAddr) BaseValidator(redPacketAddr) {}\n\n    function setERC20(\n        uint256 redPacketId,\n        address ercAddr,\n        uint256 ercMinHold\n    ) public onlyCreator(redPacketId) {\n        ercAddrs[redPacketId] = ercAddr;\n        ercHolds[redPacketId] = ercMinHold;\n    }\n\n    function check(\n        address redPacketContract,\n        uint256 redPacketId,\n        address operator\n    ) external view checkContract(redPacketContract) returns (bool) {\n        address erc = ercAddrs[redPacketId];\n        if (erc == address(0)) {\n            return false;\n        }\n        return IERC20(erc).balanceOf(operator) >= ercHolds[redPacketId];\n    }\n}\n\n/**\n * Can open the red packet after specific timestamp.\n */\ncontract TimeBasedValidator is BaseValidator {\n    mapping(uint256 => uint256) timestamps;\n\n    constructor(address redPacketAddr) BaseValidator(redPacketAddr) {}\n\n    function setTimestamp(uint256 redPacketId, uint256 timestamp)\n        public\n        onlyCreator(redPacketId)\n    {\n        timestamps[redPacketId] = timestamp;\n    }\n\n    function check(\n        address redPacketContract,\n        uint256 redPacketId,\n        address operator\n    ) external view checkContract(redPacketContract) returns (bool) {\n        uint256 timestamp = timestamps[redPacketId];\n        if (timestamp == 0) {\n            return false;\n        }\n        return block.timestamp >= timestamp;\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata"
                ],
                "": [
                    "ast"
                ]
            }
        }
    }
}